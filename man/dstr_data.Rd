% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dstr_data.R
\name{dstr_data}
\alias{dstr_data}
\title{Get All Deeper Level Dependencies}
\usage{
dstr_data(githublink = NULL, pkg = NULL, outtype,
  includebasepkgs = F, recursive = T)
}
\arguments{
\item{githublink}{A link to a github repository of an R package.}

\item{pkg}{Character input of a packagename you want to see the
dependencies of. Multiple input packages can be given in vector format.
This option is still valid in case of a of a given githublink.}

\item{outtype}{Possible output types:
\itemize{
\item edgelist: An edge list, e.g. to be used for network plots.
\item edgelist2: An edge list, e.g. to be used for network plots, including
the root package itself when using a githublink.
\item all: An overview of all packages that are eventually loaded. No further
structure visible.
\item network: An igraph network object which can directly be plotted.
\item list: More detailed than all, it's a list tha containns all packages per
first level dependency.
\item list2: like 'list' but the first level dependencies are not only
used for the names of the list elements but also included in the list elements
\item unique: like 'list', just excluding all packages, that are eventually
also loaded by another package in firstlvldep. This way you can see which
dependencies will be removed completely if you remove a certain first level
dependency (a package that you import).
\item unique2: like unique, but each first level dependency
is included in the corresponding list element IF it is a unique dependency.
\item tree: Detailed information about which package depends on which, represented
in a data frame that is showing a tree structure.
\item lvl1: The vector of packages used as input. This is a combination
when both the githublink and the pkg parameter are set.
\item root: Whether to include the name of the package of the given
github link. Returns "Root Package" when no github link was given.
}}

\item{includebasepkgs}{Whether to include base packages in the analysis or not.}

\item{recursive}{If TRUE dependencies of dependencies of ... are considered.}
}
\description{
Function takes package names as input and searches for their package
dependencies. It returns the dependencies and dependencies of further
dependencies. There are various options for the type of the output.It
is poosible to select more than one outtype. This results in a list
with each element one defined outtype.The default assumption is that there is
an R package in the current working directory and that the dependencies to be
analyzed are given in the DESCRIPTION file. Use the parameters ‘githublink’
and/or 'pkg' to alter the package/s to be analyzed.
}
\examples{

network_object <- dstr_data(githublink= "tidyverse/ggplot2", pkg="dplyr",
recursive = TRUE, includebasepkgs = FALSE, outtype = "network")

#needs package igraph attached:
#plot(network_object, edge.arrow.size = .1, edge.color="darkgrey",vertex.size = 10,
#           vertex.shape = "circle",vertex.frame.color = "white", vertex.label.font= 1,
#            vertex.label.color = "black", vertex.color = "white",edge.width = 1.5,
#            layout = layout_with_fr)


}
